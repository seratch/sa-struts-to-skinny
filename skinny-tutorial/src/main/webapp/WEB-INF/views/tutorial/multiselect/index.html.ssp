<%@val s: skinny.Skinny %>
<%@val defaultSelect1: Option[Seq[String]] = None %>
<%@val submit1: Option[String] = None %>
<%@val submit2: Option[String] = None %>
<%@val select1: Option[Seq[String]] %>
<%@val mergedSelect1: Option[Seq[String]] = select1.orElse(defaultSelect1) %>
<%@val select2: Option[Seq[String]] %>

<h1>Tutorial: Multiselect submit</h1>

select1:${select1.map(_.mkString("[", ",", "]"))}<br />
#if (submit2.isDefined)
    select2:${select2.map(_.mkString("[", ",", "]"))}<br />
#end

#if (submit2.isDefined)

#elseif (submit1.isDefined)
    <form method="post" action="${s.url(Controllers.multiselect.submitUrl)}" class="form">
    <select name="select2" multiple size="3">
    <option value="1" #if (select2.exists(_.contains("1"))) selected #end>label1</option>
    <option value="2" #if (select2.exists(_.contains("2"))) selected #end>label2</option>
    <option value="3" #if (select2.exists(_.contains("3"))) selected #end>label3</option>
    </select>
    ${unescape(s.csrfHiddenInputTag)}
    #for (s1 <- select1.getOrElse(Seq.empty))
        <input type="hidden" name="select1" value="${s1}">
    #end
    <br/>
    <input type="submit" name="submit2" value="サブミット2"/>
    </form>
#else
    <form method="post" action="${s.url(Controllers.multiselect.submitUrl)}" class="form">
    <select name="select1" multiple size="3">
    <option value="1" #if (mergedSelect1.exists(_.contains("1"))) selected #end >One</option>
    <option value="2" #if (mergedSelect1.exists(_.contains("2"))) selected #end >Two</option>
    <option value="3" #if (mergedSelect1.exists(_.contains("3"))) selected #end >Three</option>
    </select>
    <br/>
    ${unescape(s.csrfHiddenInputTag)}
    <input type="submit" name="submit1" value="サブミット"/>
    </form>
#end
